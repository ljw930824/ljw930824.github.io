[{"title":"BOSS系统分布式架构","date":"2018-04-06T13:07:15.000Z","path":"2018/04/06/BOSS系统分布式架构/BOSS系统分布式架构/","text":"安徽移动BOSS分布式架构首先说下安徽移动系统BOSS系统的基本属性和移动系统中承担的所要职务整个移动系统中其实是分了很多中心的，BOSS（基本业务支撑）、CRM（客户关系处理）、订单中心（为了营业统计各种业务办理和缴费等比较重要操作的数据报表来源）、ESB（服务处理总线）等。其中就BOSS分为了三个子系统，账务处理、计费业务、账务管理。自己所在的部门也就是账务管理，处理移动各种账务关系的部门 比如BOSS比较重要的功能发票、缴费等都放在了我们部门上。 账务管理系统Java化和其他移动移动Java化所使用的架构模式是一致的系统基本的框架采用Spring和iBatis搭配使用，数据库使用Oracle延续之前C使用的数据库系统，在Java之前也做了很多调研使用MySQL、PostgreSQL这样的关系数据库，但是考虑到Java化项目比较紧急 数据库改用调研也就搁置了（其实本身想使用MySQL做分布式数据库的，但是考虑到老员工都比较熟悉Oracl也就推了又推）。在我看来使用MySQL是很好的选择，本身他对分布式就有很好的支持，几个库搭建分布式数据库可以缓轻很大来在缴费这一边的业务来源入库，还有每个月欠费预销这种业务对数据库IO的折磨。当然除了基本的Spring和iBatis还有很多公司自研的很多框架，基本上都是在开源项目上的增加业务。 然后说说整个移动系统的架构模式，基本的分布式RPC框架，因为前面也说了移动系统的子中心很多，跨中心这种交互就使用了业内很成熟的RPC框架模式，采用了Alibaba的Dubbo作为基础框架改写自有的一套框架。其实基础的核心都没有变，Netty作为网络通信，ZooKeeper作为注册中心来使用，要说改动了也就是中间加了很多自定义的Log功能和ESB服务缓存的功能。ESB这一块的注册服务缓存，都用的Oracle自家的Coherence缓存来实现的，对于这个缓存自己也不是很了解，只知道他在永久缓存上性能很突出，零时缓存就做的很不足。","tags":[{"name":"架构","slug":"架构","permalink":"http://yoursite.com/tags/架构/"}]},{"title":"HBase场景分析","date":"2018-03-29T03:28:17.000Z","path":"2018/03/29/HBase场景分析/HBase场景分析/","text":"最近在VPS上搭建HBase还没来的及总结，又忙着去看了看公司使用HBase的场景，所以在此做个总结顺带把HBase一些基本东西复习下 1、BOSS系统中处理详单数据时使用到了HBase数据库。因为计费处理话单文件是零散的、无序的、大存储量的。而且计费下发过来的文件是一种结构化的，固定形式的。所以如果需要持久化的话非常适合HBase这种分布式列数据库方式存储。查询语言对Java也有很好支持（除非与其他框架一起使用，如 Phoenix、Hive），不像关系数据库需要使用SQL语句。HBase的索引方式只支持Row-Key（除非和其他技术在一起用）, HBase的事务是单个Row级别的。而且像详单这种数据量增速很快的东西，使用传统关系数据库做拓展和扩容是非常困难的，往往建立在昂贵的硬件和性能优化上，HBase通过增加Region数量就可以达到此的效果。 Hive和HBase使用区别类似的有例如Hive这种数据库存储，但是Hive的场景适合统计一段时间内的数据，而且不能实时返回数据。例如，用来计算趋势或者网站的日志。Hive 不应该用来进行实时的查询（Hive 的设计目的，也不是支持实时的查询）。因为它需要很长时间才可以返回结果；HBase 则非常适合用来进行大数据的实时查询，例如 Facebook 用 HBase 进行消息和实时的分析。对于 Hive 和 HBase 的部署来说，也有一些区别，Hive 一般只要有 Hadoop 便可以工作。而 HBase 则还需要 Zookeeper 的帮助（Zookeeper，是一个用来进行分布式协调的服务，这些服务包括配置服务，维护元信息和命名空间服务）。再而，HBase 本身只提供了 Java 的 API 接口，并不直接支持 SQL 的语句查询，而 Hive 则可以直接使用 HQL（一种类 SQL 语言）。如果想要在 HBase 上使用 SQL，则需要联合使用 Apache Phonenix，或者联合使用 Hive 和 HBase。但是和上面提到的一样，如果集成使用 Hive 查询 HBase 的数据，则无法绕过 MapReduce，那么实时性还是有一定的损失。Phoenix 加 HBase 的组合则不经过 MapReduce 的框架，因此当使用 Phoneix 加 HBase 的组成，实时性上会优于 Hive 加 HBase 的组合，我们后续也会示例性介绍如何使用两者。最后我们再提下 Hive 和 HBase 所使用的存储层，默认情况下 Hive 和 HBase 的存储层都是 HDFS。但是 HBase 在一些特殊的情况下也可以直接使用本机的文件系统。例如 Ambari 中的 AMS 服务直接在本地文件系统上运行 HBase。 表 1. HBase 与 RDBMS 的区别 HBase RDBMS 硬件架构 类似于 Hadoop 的分布式集群，硬件成本低廉 传统的多核系统，硬件成本昂贵 容错性 由软件架构实现，由于由多个节点组成，所以不担心一点或几点宕机 一般需要额外硬件设备实现 HA 机制 数据库大小 PB GB、TB 数据排布方式 稀疏的、分布的多维的 Map 以行和列组织 数据类型 Bytes 丰富的数据类型 事物支持 ACID 只支持单个 Row 级别 全面的 ACID 支持，对 Row 和表 查询语言 只支持 Java API （除非与其他框架一起使用，如 Phoenix、Hive） SQL 索引 只支持 Row-key，除非与其他技术一起应用，如 Phoenix、Hive 支持 吞吐量 百万查询/每秒 数千查询/每秒 当然BOSS系统中也会保存2个月详单的数据放在物理数据库中作为备份，所以当BOSS系统使用大数据量查询时候，HBase配合HadHoop和ZooKeeper可以通过ZK来达到HA的效果，如果单纯将HBase作为单机部署其实发挥不了太大作用，搭配分布式部署起来可以发挥快速作用，ZK负责至少一个HBase Master可用，Hadoop则给Hbase提供HDFS作为存储基础，这样存取速度、容错性都有很好的保证。 2、BOSS系统在ROW-KEY上的设计a.首先Row-key的设计要保证唯一性，我们将手机号码倒置+时间戳和详单专业配置匹配，可以保证其唯一性。b.其次Row-key在保证唯一性前提下，还需要尽量缩小Row-key占用的字节数，这样可以提高搜索效率，缩小搜索范围。c.接着要考虑Row-key设计对访问热点和存储负载的尽量分散，比如说手机号码这一类从13开始就有很多号段很类似的，如果直接使用手机号码也可以达到唯一性，但是这样会让Row-key哈希后存储的很集中 随之访问热点也会很集中对于Region是很大的负担，也达不到应有的效率。但是倒置的话会让尽量分散开，保证了效率和负载。ex：put ‘sdetail_201704’,’05186155281 P20170418076652A60A742F2E’,’c1:d1’,’P|P11|PW|||18255168150|20170418|092802|551|LBMP20140228551.087|1O2000000000000000|02280928005890|1|1|000000||5515515101366|5515515101366|9000181003|5|0|100798024434565280|5|||||201704218000000|5|5|5|||$’ 就例如上面：05186155281 P20170418076652A60A742F2E 这种Row-key去设计 3、再说说BOSS Java化项目调用HBase的地方其实本身HBase已经提供了很好的对Java API的支持比如Get Scan这一类，但是为了保证业务逻辑的分离，公司计费方面负责详单数据处理，于是让计费侧做了接口我们来调用。 调用的方式就是很简单，和计费侧契约规定使用定长的TCP协议来接收返回数据，前1-2指定Column-key 或者 Qulifimer “DC”（在 Hbase 中，Row-key 加上 CF 加上 Qulifier 再加上一个时间戳才可以定位到一个单元格数据（Hbase 中每个单元格默认有 3 个时间戳的版本数据）），3-6指定消息体（没有HTTP这类消息头什么的，浪费IO），最后几位指定消息长度和是否结束标志（因为详单数据意味着很多，需要循环去取）。这样设计有点类似Dubbo的通信协议，删除无用信息，只保留业务信息和关键信息，提高IO效率。 然后计费侧根据我们的参数，做一些处理后Scan一定范围，这个范围根据手机号 和 时间就已经变得很小了，所以忽略了查询的时间，IO本身也没有太多无用信息，保证了BOSS查询特大数据量详单的效率。","tags":[{"name":"HBase","slug":"HBase","permalink":"http://yoursite.com/tags/HBase/"}]},{"title":"2017总结","date":"2018-03-10T01:45:14.000Z","path":"2018/03/10/2017总结/2017总结/","text":"2017真我2017年觉得时间过的很快，可能是更多时间投入到工作中了，也没在意每个月的更迭。所以也没什么时间来写文章了。 先说说自己的收获吧 去年给自己购了俩台服务器，一台Aliyun、一台VPS。Aliyun自然是部署自己玩的应用还有就是练习下以前零散学习的Linux操作，VPS不用说了，自然是部署个SS 看一看外面的世界，以前都是购买VPN，现在自己部署个洛杉矶机房的 速度还不错 很值有兴趣的朋友可以看看 购买选择看了很多论坛，放假回来就直接买了CN2 DC8的洛杉矶机房专线，具体参考可以看看搬瓦工的搬瓦工VPS-竞价比较高 搭建SSR搬瓦工对ssr搭建支持也非常棒，可以一键部署。这个网上教程很多，没什么可说的。其中需要注意一点的就是搭建好服务、本地客户端配置好之后，有可能无法正常Google、FQ。这个时候重启一下VPS或者SSR服务试一试。 SSH登录SSH远程登录VPS也是折腾VPS的基本需求之一。网上也有许多教程，Mac下SSH客户端我用的是iterm2，Windows平台下推荐的是Putty。其中需要注意的是登录密码不要搞错了，个人就是把VPS网页登录的密码当成远程登录VPS的密码，折腾了好久才发现。在VPS的控制台界面，左侧有一个root password modifiaction 选项，进了该页面即可获得远程登录SSH的随机密码。 SSH免密码登录每一次都输入密码，太难受了，当初Git也是SSH登录，自然有了免密码登录需求。很简单Google一下就有了相应的文章，这里推荐阮一峰老师的SSH原理与运用（一）：远程登录。很详细，跟着一步一步做就好了。 安装Python3.xLinux系统自带低版本的Python，比如Python2.6，但是不太好用，因此需要升级Python至3.x版本。注意是升级，不要删除老版本的Python，因为系统有许多东西依赖老版本的Python，相关需要安装的东西建议参考博文升级python2.7和安装pip,easy_install和setuptool。 尝试跑Python代码cd到根目录，建立project文件夹，里面就放置各种Python脚本即可。另外如果需要对Python版本有依赖的话，一定要用虚拟环境来管理。相关博文Kickstarting Flask on Ubuntu - Setup and Deployment.在上述博文中将学习到虚拟环境管理、Nginx配置、Supervisor配置、部署、GitHook、Automatic等内容。相信阅读完上述内容，你会有许多收获。 好了说完这些题外，这一年还是看了很多书的。看书使我开心😎 局外人一本书说尽了司法运作把人性摧残彻底的故事。总有人面对眼前一切都表现的毫不在乎，但这不是司法将他定罪的原因。加缪笔下的默尔索着力揭示了现代司法罗织罪状的邪恶。默尔索很干脆的承认自己犯了杀人命案，在面对人群社会与司法机制。感叹加缪23岁时 就能写出这样的故事。 容忍与自由看了胡适先生这么些个书，大多摘自他在《新青年》发表的文章以及他在北平和台湾个大学的演说，还有他在北大上课的笔记。胡适先生所推崇的思想无外乎: 读书这件事，要求实：进一寸有一寸的欢喜，每一步都踌躇满志才可以。自由解放，不是革命，而是由于自己 忠于自己。 我对胡适先生的印象就是，先生自己把西洋学习到的一套东西，真真切切的想融入到年轻人身上，再让年轻人自己去揣摩这些东西的作用。和孔子的“有教无类”有一些想法上的共鸣。所以说胡适先生 可以尊称为先生。 次贷危机书也就翻了一些自己感兴趣的章节跳着看，本身对金融也不是很了解，在当下国内次贷的泛滥，满屏的免评估小额贷款，学生和年轻人大多经不住这诱惑，最后带来的只能是失信和贷款冻结。只是说看了美国和日本的金融危机 历史总是遵循着轨迹发展的。 梵高·手稿书中记录了大量梵高画作的手稿和书信手稿。书信中不免看出当时梵高被一个镇的神父和大多数不理解他的人逼进疯人院的痛苦和失望。 创新公司·皮克斯启示作者就是皮克斯三位创始人之一埃德文·卡特姆写的。从他的角度描写皮克斯保持了这么久的活力是从哪里来的，包括和乔布斯共事的一些趣事和乔布斯一些理念是如何影响皮克斯到现在的。这本书我觉得每一个有创业梦想的人或者说正在创业的人都应该看的。埃德文·卡特姆说了很多皮克斯艰难时期是如何度过的，从迪斯尼不看好电脑动画制作，到迪斯尼愿意提供最好的剧本与皮克斯合作，这期间他所经历的一切，都是值得品读的。 算法图解算法的知识本身自己没有仔细研究过，翻了几页算法导论也是看的头疼。我是个喜欢图形记忆和了解的人，所以对这种抽象图形化的东西 接受还是很快的。作者用Python演示算法，又能深入了解算法，又能练习Python 何乐不为。 还有很多书就不想列举了，总之看书使我快乐一定觉得我这一年肯定没好好学习，不不。。。计算机类的书太贵了，我真的不舍得。。。所以都下了电子书版本来看，平时工作中需要看哪一类，也方便一些。比如推荐给大家： 《Java性能权威指南》 《快学Scala(中文完整版)》 《HBase权威指南中文版》 《恰如其分的软件架构.风险驱动的设计方法》 《奇点临近》 《分布式服务框架原理与实践_李林锋著》 《Java TCP/IP Socket编程》 《Python Cookbook》 《高性能网站建设指南》 《Groovy_in_Action》 《Java 8 In Action》 《数据结构与算法分析_Java语言描述·Mark Allen Weiss》…有点多，也不一一列举了，上面这些书是主要看了，有些书可以当成字典 用的时候去查看，效果更好。有些书要当成个镜子，每天照一照。比如推荐的系列就是 in_Action系列，和图灵系列，这些系列的书从作者到出版社审核都是很优秀的，看个技术类的书 如果内容质量不高，你看的都是过时的 活着说是错的，就很尴尬了。 经过这一年看技术的发展，谈谈自己的感想： 首先是Java发展太快了，从Lambda到模块化再到马上要出来的Version10的类型自动推断，需要关注的点很多。有总比没有强，有了这些东西的支撑，你在选择使用Java来实现的时候 才有更多选择。 今年TOBO社区显示 明显大家将关注点放在了支持动态的语言上面比如Scala、Python等这些灵活的语言上面。因为前些年JavaScript以及衍生出来的语言发展迅速，后端语言上也需要跟上脚步。所以新的一年可以多关注一些支持动态的语言上面。 当当当，Github上AI开源的东西，要看 要看 要看。前些日子拿了Facebook开源预测框架prophet试试手，这种时序预测的框架其实有很大作用，在预测房价上。。。哦不是预测价格走势、航班晚点趋势等等 商业用途上有很大优势，因为只需要一个csv文件横轴竖轴的数据就可以预测，很方便。看开源代码也可以学习算法。 最后是自己对行业和发展的想法，计算机语言发展的快速大家都知道，你现在学习的东西 10年以后可能根本用不到，这也不是什么危言耸听。所以思忖着把学习重点可以适当放在架构这一类学习周期时间长，更迭速度慢的东西上 会发挥更大作用。至于框架类的东西，精通几个优秀框架即可，没必要因为招聘上写了一大堆框架熟悉优先，你就去学习所有框架，没这个必要 和 没这个精力，大多可以做到使用API就很不错了。 新年还是要有计划的，多学习 多买彩票。。。（缺钱啊）嗯 多培养自己其他领域的爱好，工作不忙了（不可能的）去重新拿上吉他给自己放松 钓鱼和朋友小聚一下 篮球和撸铁要继续（不然就是药不能停的状态了） 看书也不能停 非技术相关的使劲买买买（技术的就下载电子书） 收集几大主机，玩游戏也很重要 把媳妇骗回家 想学架子鼓 想学木匠技艺（这个怎么说呢。。。房子装修的时候自己给自己做家具吧。。。） 继续保持好奇心「Stay hungry. Stay foolish.」 Less is More 好了，最重要的就是一句话 Less is More还是送上我最喜欢的","tags":[{"name":"2017随笔","slug":"2017随笔","permalink":"http://yoursite.com/tags/2017随笔/"}]},{"title":"Love","date":"2017-05-07T14:10:26.000Z","path":"2017/05/07/love/love/","text":"在住的地方蜗居不久，以为跳槽到现在的公司会轻松很多，没想到以来就是遇上大版本改造中间件。身体有点吃不消。也许久没有回家了。每周末都定期和父母通话，尤其母亲很是想念。所以今天父母今天也是开车来到住所看望我，前一晚告诉父母没啥带的，不用麻烦了。但还是带了一大包零食和席子,真的很谢谢他们对我的爱","tags":[{"name":"2017随笔","slug":"2017随笔","permalink":"http://yoursite.com/tags/2017随笔/"}]},{"title":"为了所爱的体育","date":"2017-03-06T13:31:53.000Z","path":"2017/03/06/forsoccer/forsoccer/","text":"&emsp;&emsp;刚刚看完了每周一必看的节目《天下足球》😁&emsp;&emsp;好吧，其实我只是个伪足球迷，我对足球的热爱完完全全来自那荒度时光（美好时光）的PES8，实况足球国际版。我滴孩，这游戏在零几年还能再火点吗。电脑上，PlayStation上，Xbox上。我都忘了当时有没有Xbox可以玩。反正只要是各个平台上有上线的，实况足球，FIFA，我都要玩个遍。 &emsp;&emsp;记得那时几个哥哥都没成家，过年就是我们的狂欢，那必然少不了去网吧，去游戏厅。我的大哥是最喜欢足球的，所以足球游戏他是不会错过的。每次我们都会玩个很久的PES实况足球。他喜欢AC米兰和皇马，我就是曼联和巴塞罗那。如果是国家队，那他一定是意大利，我就一定是英格兰。反正每次都是我赢😎所以无所谓什么队。 &emsp;&emsp;所以说对足球的喜爱，或者说是对足球的认识，完全是从游戏开始的。但渐渐也喜欢上了足球，不愧是世界第一运动。还记得第一次看足球赛是中国队进入世界杯决赛圈，我的天哪，那时候住在爷爷家。爷爷家客厅的大沙发，放下来就是个床，中国队的比赛基本上夜夜都要熬夜看，家里也不乏和我一样有好几个伪球迷，但是当时的中国队真的可以说是梦之队。像郝海东，李铁这样的球员，现在的中国队真的是差了一大截，但是总的来说，中国队在积极组建和成长中，这是好事。虽然我最喜欢的运动是篮球，而且基本上到现在都保持着每周一次的频率去践行自己喜欢的运动。但是足球真的可以说是我所爱的运动。场上胜利11人的队伍，为了同一个目标在绿荫上奔跑真的可以说是个伟大的运动。💪🏿比起篮球的观赏性，足球更多的是代表了一种精神。这也是我最喜欢的。 &emsp;&emsp;所以说你不看足球，你不知道有些人定义了足球中的一些动作。你不知道罗纳尔多的钟摆过人，你不知道齐达内的马赛回旋，你不知道小罗的牛尾巴，你不知道禁区旁有个皮耶罗区域，你不知道巴蒂式进球，你不知道班克斯式扑救，你不知道克鲁伊夫转身，你不知道勺子点球，你不知道蝎子摆尾，你不知道彩虹过人和蛙跳过人，你不知道贝式弧线，你也不知道有炸丸子和内切射门。","tags":[{"name":"我热爱的","slug":"我热爱的","permalink":"http://yoursite.com/tags/我热爱的/"}]},{"title":"新公司","date":"2017-02-24T14:15:52.000Z","path":"2017/02/24/newstart/newstart/","text":"离开 &emsp;&emsp;离开了上家公司，自己也是在Research&amp;Develop这个岗位上摸爬滚打了快一年了，从以前搞黑盒到现在的研发，总觉得自己做了不得了的决定。记得在YOHO！的时候，特别希望经理教我白盒和自动化，经理来句，你TM年纪轻轻的，学什么测试，搞开发啊。我一想 是啊，搞什么测试，去学开发去。 &emsp;&emsp;然后跟着我那程序设计老师，去做了个项目，类似今日头条App的后端和后台管理系统，那些日子真是难熬啊。天天买各种书看，几乎每天都要通宵，自己身体也受不住了，还好做完了，也上线了，自己也充实了一把，所以也把这个难熬的事情想成愉悦的经历了。起码我从一个Java初学，学习了数据库，学习了Web相关的知识Servlet‘html’css这些基本，再到传说中的几大框架实现个基本功能。也算是有点入门了，当时自己一个人做出这个后端，还是挺有成就感的，虽然现在看到老的代码觉得逻辑很奇怪，但这些都不是事😅 &emsp;&emsp;后来又来到一个不大不小的外包单位，发现还是自己一个人来负责后端，轻车熟路一般又学习到了Mybatis持久框架，也是自己一个人默默在问，在学习。更宝贵的经验是，我学习到了很多关于整个项目流程的知识，因为后端是我一人负责，开发‘部署’测试的调度也就落到我头上了。虽然当时没接触过，但我还是对经理来了一句么问题。然后自己又从网上下了很多Linux的电子书和Junit的电子书，学会了在Linux环境下自己发布部署，自己去单元测试代码。项目中也用到了很多第三方集成，像极光推送‘即时IM这样的，学习了一些第三方集成的基本知识。学习JSTL‘Bootstrap’Jquery去做更方便的后台管理系统。知道了用Ajax调用接口是多么的方便。也自己去实现了一个短信验证码的功能，从平台调取发送短信，然后保存到数据库中，传Token到App端去双向验证会更安全。这段时间自己负责了很多东西，也学到了很多东西，身边有一群贵人和好同事的帮忙，自己也很开心。 &emsp;&emsp;再后来就来到了上家公司，也接近毕业了🎓，所以说还是很想努力去💪做出一些事情的。来到这里才发现你不仅要明白技术很重要，在一个项目中，去了解业务矩阵也是非常重要的事情，你应该明白参与项目的具体全部业务，也应该明白这个项目或者说这个系统在整个公司中是承担什么职责，是原子的还是复合的，需不需要与外部系统做交互，应该用什么方式去交互，你的每一个功能实现，是不是和大家讨论过实现的方式，以及功能的实现是不是可以有分支或者策略模式去拓展的。你都要考虑。这是非常重要的，也是我在这个公司学到的最宝贵经验。还记得16年元旦给自己定了一个计划。 &emsp;&emsp;当时觉得这计划得流产，毕竟觉得有些多了。没想到就在16年底，除了第一个还都基本完成了。😎公司在新的项目中就是使用了SpringJDBCTemplet+Spring+SpringMVC去实现的，SpringJDBCTemplet以下简称JT，而且是我自己封装了数据访问层，用反射和代理把JT去封装实现了。每次操作都使用这个Jar包去实现数据访问。domin也都封装到Jar中去，让domin更纯洁。也省去了JT很多必须要实现的东西，比如Rower这些东西。自己也成就感很大，毕竟公司都用上了自己封装的东西。 来到&emsp;&emsp;年后，因为各种原因，来到了一家国企上班。怎么说呢，新到一家国企上班。最大的感悟就是，好TM严肃啊。不能上外网，不能用U盘，这让习惯懒散的我不能适应。然后这也是刚来几天的不习惯，发现也是很多的，国企的技术并不是多么落后迂腐，反而和我想的不一样，是非常先进的。有调度中心，有自己开发的中间件（目前在这个部门下），也有很多RPC的应用，有一大推自己封装的相当不错的框架，连构建都用Jenkins，觉得逼格可以啊。 所以说新公司！努力吧少年！","tags":[{"name":"2017随笔","slug":"2017随笔","permalink":"http://yoursite.com/tags/2017随笔/"}]},{"title":"First Page","date":"2017-01-08T17:21:15.000Z","path":"2017/01/09/FirstPage/","text":"欢迎来到Hexo的世界，Fanta","tags":[]}]